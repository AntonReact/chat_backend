{
  "compileOnSave": true, // При значении true указывает используемой редактору кода производить компиляцию при каждом сохранении файлов TypeScript. Поддерживается не всеми редакторами кода.
  "compilerOptions": { // Настраивает параметры компиляции. Параметры называются также, как и в командной строке.
    // Основные настройки.
    // Настройки путей для создания выходных файлов.
      "module": "amd", // Определяет тип импорта кода в итоговом файле, прописанном в "outFile". Необходимо задавать при использовании опции "outFile".
      "outDir": "./build", // Имя единого итогового выходного файла, в который будут помещен код из всех найденных TypeScript-файлов.
      "rootDir": "./", // Путь до папки с которой надо начинать поиск входных файлов. Обычно корневая директория вычисляется по списку входных файлов. Данная опция необходима для проверки, что все найденные TypeScript-файлы находятся внутри корневой папки.
      "baseUrl": "./", // Путь до базовой папки для поиска не относительных путей до файлов.
      "paths": {  // Укажите сопоставление маршрутов для вычисления по сравнению с параметром baseUrl.
          "jquery": ["node_modules/jquery/dist/jquery"] // Путь относительно "baseUrl".
      },
      // "sourceMap": true, // Создавать ли соответствующие source map файлы ".map"?
      "lib": ["es5", "es6", "es2015.promise", "es2016.array.include"], // Набор библиотечных файлов полифилов, которые будут включены в итоговый выходной файл.
      "target": "ES2020",
      "allowJs": false, // Разрешать компилировать файлы с JavaScript-кодом?
      "checkJs": false, // Сообщить об ошибках в .js-файлах? Используйте совместно с "allowJs".
      "downlevelIteration": false, // Обеспечьте полную поддержку итераций для for - in, ..., деструктуризации при настройке на ES5 или ES3?
      "noEmitOnError": true, // Не создавать итоговый файл, если во время компиляции произошла ошибка.
      "noEmitHelpers": false, // Не помещать в код итогового файла функции хелперы.
      "importHelpers": false, // Имортировать созданные хелперы (__extends, __rest и так далее) из "tslib".
      "noUnusedLocals": true, // Показывать ошибку, если где-то найдены неиспользуемые локальные значения.
      "noUnusedParameters": true, // Показывать ошибку, если где-то найдены неиспользуемые параметры.
      "strictNullChecks": false, // Значения "null" и "undefined" могут быть присвоены только значениям данного типа и значениям только с типом "any"?
      "noImplicitUseStrict": false, // Не записывать 'use strict' в итоговый выходной файл?
      "alwaysStrict": true, // Компилировать ли каждый файл в строгом режиме и создавать ли 'use strict' для каждого выходного файла? Требуется TypeScript версии 2.1 или новее.
      "strict": false, // Включить ли все строги проверки типов сразу: noImplicitAny, noImplicitThis, alwaysStrict, strictNullChecks, strictFunctionTypes, strictPropertyInitialization?
      "removeComments": true, // Удалить все комментарии из итогового файла.
      "pretty": true, // Окрашивать в терминале сообщения об ошибках.
      "watch": true, // Запустить компилятор в режиме отслеживания изменений во входных файлах и их повторной компиляции?
  },
  // "exclude": [ // Секция "exclude" позволяет исключить при компиляции определенные файлы, которые находятся в заданных папках секции "include" или в папках всего проекта, если секция "include" не задана.
  //   // Компилятор не будет учитывать перечисленные в секции "exclude" файлы TypeScript, которые находятся в папках из секции "include".
  //   // Однако файлы, заданные в секции "files" будут обязательно скомпилированы.
  //   // Если секция "exclude" не указана, то по умолчанию будут исключаться из компиляции все файлы из папок:
  //   // - node_modules,
  //   // - bower_components,
  //   // - jspm_packages,
  //   // - файлы из папки, указанной в опции компилятора "outDir".
  //   "src/**/*.spec.ts",
  //   "node_modules"
  // ]
}